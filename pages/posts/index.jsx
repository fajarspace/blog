import fs from "fs";
import path from "path";
import Head from "next/head";
import matter from "gray-matter";
import RootLayout from "../layout";
import Link from "next/link";
import { metadata } from "@/theme.config";
import styles from "./page.module.css";
import { format, formatISO, parseISO } from "date-fns";
import { useState } from "react";

// Number of posts to display per page
const postsPerPage = 7;

export const getStaticProps = async () => {
  const files = fs.readdirSync(path.join("content/posts"));

  const posts = files
    .map((filename) => {
      const markdownWithMeta = fs.readFileSync(
        path.join("content/posts", filename),
        "utf-8"
      );
      const { data: frontmatter } = matter(markdownWithMeta);

      if (frontmatter.draft === true) {
        return null;
      }

      const slug = filename.split(".")[0];
      const dateISO = formatISO(parseISO(frontmatter.date));

      return {
        frontmatter: {
          ...frontmatter,
          date: dateISO,
        },
        slug,
        href: `/${slug}`,
      };
    })
    .filter((post) => post !== null);

  return {
    props: {
      posts,
    },
  };
};

export default function Posts({ posts }) {
  const pageTitle = `${metadata.title} - Posts`;
  const [searchQuery, setSearchQuery] = useState("");
  const [currentPage, setCurrentPage] = useState(1);

  const filteredPosts = posts
    .sort((a, b) => new Date(b.frontmatter.date) - new Date(a.frontmatter.date))
    .filter((post) =>
      post.frontmatter.title.toLowerCase().includes(searchQuery.toLowerCase())
    );

  // Calculate the total number of pages
  const totalPages = Math.ceil(filteredPosts.length / postsPerPage);

  // Function to get a slice of the posts for the current page
  const getCurrentPagePosts = () => {
    const startIndex = (currentPage - 1) * postsPerPage;
    const endIndex = startIndex + postsPerPage;
    return filteredPosts.slice(startIndex, endIndex);
  };

  return (
    <>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <title>{pageTitle}</title>
      </Head>
      <RootLayout>
        <h1>Posts</h1>
        <div className={styles.searchbar}>
          <input
            className={styles.searchinput}
            type="text"
            placeholder="Cari tulisan..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
        <ul>
          {getCurrentPagePosts().map((post, index) => (
            <div key={index} className="post-item">
              <h3>
                <Link className="post-item-title" href={post.href}>
                  {post.frontmatter.title}
                </Link>
              </h3>
              <p className="post-item-desc">
                {post.frontmatter.description &&
                  `${post.frontmatter.description.slice(0, 100)}...`}
                <Link className="post-item-more" href={post.href}>
                  Baca &rarr;
                </Link>
              </p>
              <time className="post-item-date">
                {format(parseISO(post.frontmatter.date), "dd MMM yyyy")}
              </time>
            </div>
          ))}
        </ul>

        {/* Pagination buttons */}
        <div className={styles.pagination}>
          {Array.from({ length: totalPages }, (_, i) => (
            <button
              key={i}
              className={`${styles.pageButton} ${
                i + 1 === currentPage ? styles.activePage : ""
              }`}
              onClick={() => setCurrentPage(i + 1)}
            >
              {i + 1}
            </button>
          ))}
        </div>
      </RootLayout>
    </>
  );
}
